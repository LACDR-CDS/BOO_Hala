"0",""
"0","# Display the head of the new logcpmData object."
"0","replicateFilterOutput <- data.frame()"
"0",""
"0","# For each mean ID (experimental condition)"
"0","for(i in unique(metaData$mean_ID)){"
"0","  # Subset the meta data to keep only samples from this experiment"
"0","  metaDataReps <- metaData %>% "
"0","    filter(mean_ID == i)"
"0","  "
"0","  # Subset the log2 CPM values to keep only these samples"
"0","  cpmDataReps <- logcpmData[, metaDataReps$sample_ID] "
"0","  "
"0","  # Loop through each column in the CPM data  "
"0","  for(j in 1:ncol(cpmDataReps)){"
"0","    # In a pairwise fashion"
"0","    for(k in 1:ncol(cpmDataReps)){"
"0","      # Save the position in the loops that you are in"
"0","      sample_A <- colnames(cpmDataReps)[j]"
"0","      sample_B <- colnames(cpmDataReps)[k]"
"0","      "
"0","      # Don't calculate pairwise correlations between identical samples (since it will be 1)  "
"0","      if(sample_A != sample_B){"
"0","        # Calculate pairwise correlation values"
"0","        r2 <- cor(cpmDataReps[,j], cpmDataReps[,k])"
"0","        "
"0","        # Update the filter output data frame"
"0","        replicateFilterOutput <- rbind("
"0","          replicateFilterOutput, "
"0","          data.frame(mean_ID = i, "
"0","                     sample_A = sample_A,"
"0","                     sample_B = sample_B,"
"0","                     r2 = r2))"
"0","      }"
"0","    }"
"0","  }"
"0","}"
"0","head(replicateFilterOutput)"
