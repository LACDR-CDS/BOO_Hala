"0","# Create a vector of unique experimental conditions (mean_IDs)"
"0","experimental_conditions <- unique(replicates_per_condition$mean_ID)"
"0",""
"0","# 2. Initialize a data frame to store the results."
"0","if (is.matrix(cpmData)) {"
"0","  relevance_results_df <- data.frame(matrix(NA, "
"0","                                            nrow = nrow(cpmData), "
"0","                                            ncol = length(experimental_conditions)),"
"0","                                     row.names = rownames(cpmData))"
"0","} else { "
"0","   relevance_results_df <- data.frame(row.names = rownames(cpmData))"
"0","   for(condition_id_init in experimental_conditions) { # Renamed loop variable to avoid conflict"
"0","     relevance_results_df[[condition_id_init]] <- NA_real_ "
"0","   }"
"0","}"
"0","colnames(relevance_results_df) <- experimental_conditions"
"0",""
"0","# 3. Loop through each experimental condition"
"0","for (condition_id in experimental_conditions) {"
"0","  sample_ids_for_condition <- metaData %>%"
"0","    filter(mean_ID == condition_id) %>%"
"0","    pull(sample_ID)"
"0","  valid_sample_ids_for_condition <- intersect(sample_ids_for_condition, colnames(cpmData))"
"0","  "
"0","  if (length(valid_sample_ids_for_condition) > 0) {"
"0","    cpm_subset_for_condition <- cpmData[, valid_sample_ids_for_condition, drop = FALSE]"
"0","    is_above_threshold_matrix <- cpm_subset_for_condition > 1"
"0","    percentage_replicates_above_threshold <- rowMeans(is_above_threshold_matrix, na.rm = TRUE) * 100"
"0","    relevance_results_df[, condition_id] <- percentage_replicates_above_threshold"
"0","  } else {"
"0","    cat(""Warning: No valid sample columns found in cpmData for condition_id:"", condition_id, ""\n"")"
"0","    relevance_results_df[, condition_id] <- NA_real_ "
"0","  }"
"0","}"
"0","print(head(relevance_results_df[, 1:min(3, ncol(relevance_results_df))], 6))"
