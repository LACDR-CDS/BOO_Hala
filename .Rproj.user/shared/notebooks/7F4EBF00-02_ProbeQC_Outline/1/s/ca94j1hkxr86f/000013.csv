"0","# Add a relevance flag to the 'manifest'"
"0","if (""passes_relevance_filter"" %in% colnames(manifest)) {"
"0","  manifest <- manifest %>% select(-passes_relevance_filter)"
"0","  cat(""Removed existing 'passes_relevance_filter' column from 'manifest'.\n"")"
"0","}"
"0","manifest <- manifest %>% "
"0","  select(-any_of(c(""passes_relevance_filter.x"", ""passes_relevance_filter.y"")))"
"0",""
"0",""
"0","manifest <- manifest %>%"
"0","  mutate("
"0","    passes_relevance_filter = case_when("
"0","      flag_realignment == ""Remove"" ~ FALSE, # Probes already marked for removal fail relevance"
"0","      !is.na(n_relevant) & n_relevant >= 1 ~ TRUE,  # Relevant in at least 1 condition"
"0","      TRUE ~ FALSE # Default to FALSE (e.g. if n_relevant is NA for some other reason, or 0)"
"0","    )"
"0","  )"
"0","print(table(manifest$passes_relevance_filter, useNA = ""ifany""))"
"1","
"
"1","FALSE "
"1"," TRUE "
"1","
"
"1"," 7698 "
"1","14835 "
"1","
"
"0","# 2. Identify the 'probe_name's of probes that PASS the relevance filter"
"0","probes_passing_relevance_filter <- manifest %>%"
"0","  filter(passes_relevance_filter == TRUE) %>%"
"0","  pull(probe_name)"
"0",""
"0","num_probes_passing_filter <- length(probes_passing_relevance_filter)"
"0","cat(""Number of probes passing the relevance filter (relevant in >= 1 condition):"", "
"0","    num_probes_passing_filter, ""\n\n"")"
"1","Number of probes passing the relevance filter (relevant in >= 1 condition):"
"1"," "
"1","14835"
"1"," "
"1","

"
"0","# 3. Remove probes from 'countData' that do NOT pass the relevance filter."
"0","probes_to_keep_in_countData_final <- intersect(rownames(countData), probes_passing_relevance_filter)"
"0",""
"0","cat(""Number of probes from the 'passes_relevance_filter' list that are actually in current countData:"","
"0","    length(probes_to_keep_in_countData_final), ""\n"")"
"1","Number of probes from the 'passes_relevance_filter' list that are actually in current countData:"
"1"," "
"1","14835"
"1"," "
"1","
"
"0","original_row_count_countData <- nrow(countData)"
"0",""
"0",""
"0","countData <- countData[probes_to_keep_in_countData_final, , drop = FALSE]"
"0","print(head(countData[, 1:min(5, ncol(countData))]))"
