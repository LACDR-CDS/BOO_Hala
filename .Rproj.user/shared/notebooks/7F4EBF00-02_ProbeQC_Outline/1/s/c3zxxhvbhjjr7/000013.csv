"0","#Convert row names of countData to a column to work with them."
"0","countData_with_probe_col <- countData %>%"
"0","  as.data.frame() %>% # Ensure it's a data frame for tibble functions"
"0","  tibble::rownames_to_column(var = ""probe_name"")"
"0",""
"0","# 2. Separate the 'probe_name' column into 'gene_symbol' and 'probe_id_suffix'."
"0","countData_with_gene_symbol <- countData_with_probe_col %>%"
"0","  tidyr::separate(probe_name, into = c(""gene_symbol"", ""probe_id_suffix""), "
"0","                  sep = ""_"", remove = TRUE, extra = ""merge"")"
"0","#3. Group by 'gene_symbol' and sum counts across all sample columns."
"0","gene_level_countData <- countData_with_gene_symbol %>%"
"0","  select(-any_of(""probe_id_suffix"")) %>% # Remove the suffix column if it exists"
"0","  group_by(gene_symbol) %>%"
"0","  summarise(across(where(is.numeric), sum, .names = ""{.col}""), .groups = 'drop')"
"0",""
"0","# 4. The 'gene_level_countData' now has 'gene_symbol' as a column."
"0","if (""gene_symbol"" %in% colnames(gene_level_countData)) {"
"0","  gene_level_countData <- gene_level_countData %>%"
"0","    tibble::column_to_rownames(var = ""gene_symbol"")"
"0","  cat(""Set 'gene_symbol' as row names for 'gene_level_countData'.\n"")"
"0","}"
"1","Set 'gene_symbol' as row names for 'gene_level_countData'.
"
"0","if (nrow(gene_level_countData) > 0) {"
"0","  print(head(gene_level_countData[, 1:min(5, ncol(gene_level_countData))]))"
"0","} else {"
"0","  cat(""'gene_level_countData' is empty. Check the grouping and summarising steps.\n"")"
"0","}"
