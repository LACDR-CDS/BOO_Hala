---
title: "BOO 2025 - Example Analysis"
subtitle: "Script 5: Differential expression - Questions"
date: "`r Sys.Date()`" 
author: 
  Student name
output:
  html_document:
    code_download: true
    theme: united
    lowlight: tango
    df_print: paged
    toc: true
    number_sections: true
    toc_float:
      collapsed: false
      smooth_scroll: true
---

***

> In this script, you will identify differentially expressed genes (DEGs) and visualize your results.

***

# Setup

## Clean

As before, we perform several setup steps at the start of the script to ensure our work is reproducible and clear. 

**Exercise 1: Download the R markdown template, clean your environment, and set the following variables:**

* `root_dir` - project folder
* `count_path` - location of the `countData` object
* `metadata_path` - location of the `metaData` object
* `low_store` - location to store DEG results for the low toxicity compound
* `high_store` - location to store DEG results for the high toxicity compound

```{r clean}
 rm(list = ls())


```

***

## Packages

In this script, we introduce a new package: `DESeq2`, a package that analyses count-based sequencing data, such as TempO-Seq, to identify differentially expressed genes between experimental conditions.

**Exercise 2: Load `DESeq2`, `ggrepel`, and `tidyverse` into your R environment:**

```{r load-packages, warning=F, message=F}
#

```

***

## Load data

**Exercise 3: Load the count and metadata into your R environment:**

```{r load-data, warning=FALSE, message=FALSE}
#

```

***

# DEG Analysis 

## Mean ID

In order to perform DEG analysis we need to ensure we have the correct `mean_ID` and `mean_ID_control` variables. These can be used to tell DESeq2 which samples to compare:

* `mean_ID` is a group identifier, describing which treatment condition each sample belongs to
* `mean_ID_control` is a control identifier, describing which control samples a group should be compared to

In the case of our data we will have:

* A `mean_ID` level for each experimental condition (6 concentrations for 2 compounds plus two plate-specific DMSO groups)
* No `mean_ID_control` for the DMSO controls, but the appropriate DMSO control specified for the treated samples

**Exercise 4: Identify these variables in your `metaData`:**

```{r inspect}
#

```

***

## Contrast

DESeq2 uses an object called a contrast, which details the comparisons that will be run. We often want to save several comparisons together in one object, such as all results for each compound together.

**Exercise 5: Create a `contrast` data frame, including a variable `file_ID` which describes which file each comparison should be saved in:**

```{r contrast}
#

```

***

## Subsets

We want to perform DEG analysis for each concentration of the low and high toxicity compounds.

**Exercise 6: Subset `contrast` to include only the comparisons for the low toxicity compound and create a vector `levels` which can be used to loop through the selected `mean_ID`:**


```{r levels}
#

```

***

Before looping through `levels`, let's go through the steps required to perform a DEG analysis.

**Exercise 7: Using the first value in `levels`, subset the `contrast`, `countData`, and `metaData` to include only the relevant samples:**

<details>
  <summary><strong>Hint</strong></summary>

  Make sure you create new objects, such as `countData_sub` and `metaData_sub` to prevent overwriting the full data frame.

</details>


```{r subset}
#

```

***

## Fit models

Now that we have subset our data, we can use it to create a DESeq object (`dds`). This also requires us to set our `design`, or model formula. In our data, this will be a simple comparison of two levels of `mean_ID`.

**Exercise 8: Use the `DESeqDataSetFromMatrix()` function to create a `dds` object:**

<details>
  <summary><strong>Hint</strong></summary>

  Designs are a special type of object in R, the formula, which is specified using a tilde (e.g. `~ mean_ID`).

</details>


```{r fit}
#

```

***

Next, we use the `DESeq()` function to:

1. Calculate **size factors** using the median ratio method, which normalizes for differences in sequencing depth or library size across samples. The motivation is similar to CPM normalization, but each sample is instead compared to a pseudo-reference sample composed of the geometric mean of all genes. 
2. Estimate **dispersions** (biological variability) for each gene across replicates, in order to properly quantify confidence in results (which will be lower for highly variable genes).
3. Fit a **generalized linear model** (GLM) for each gene, using a negative Binomial distribution. This takes the normalized counts (from size factors), design formula, and estimated dispersion to produce log2 fold changes (log2FC), standard errors (SEs), and p-values.

The output object, `dds`, contains all the model fits and is ready for extracting results.

**Exercise 9: Use the `DESeq()` function to update the `dds` object and include all specified model fits:**

```{r deseq}
#

```

***

## Extract results

Results can be extracted from a `dds` object using the `results()` function. However, we additionally apply shrinkage to our results. **Shrinkage** pulls extreme or noisy log2FC towards zero when they are not well supported by the data, usually due to:

* Low expression levels
* High dispersion (biological variability)
* Small sample sizes

Shrunk log2FC are more stable and realistic, especially in these scenarios. **Normal** shrinkage uses a Normal prior distribution (bell curve with its peak at 0), which assumes that most genes are not differentially expressed and encourages smaller fold changes unless there is strong evidence to the contrary. 

The final log2FCs are then a posterior estimate that combines:

* The observed data, and
* The prior (Normal distribution centered at 0)

**Exercise 10: Use `lfcShrink()` to extract results for the selected comparison:**

<details>
  <summary><strong>Hint</strong></summary>

  You will get a warning using normal shrinkage, but our experience suggests that it is the best method for these simpler designs.

</details>


```{r shrinkage}
#

```

***

**Exercise 11: Wrangle the output to additional columns:**

* `gene_symbol` containing the gene names
* `mean_ID` containing the mean ID of the treated samples
* `mean_ID_control` containing the mean ID of the control samples

```{r results}
#

```

***

## Loop

Using a `for` loop, you can run each of these steps for every required comparison.

**Exercise 12: Loop through the remaining values of the `levels` variable to add all of the comparisons for the low toxicity compound to your `res` object:**

```{r loop}
#

```

***

**Exercise 13: Perform DEG analysis for the high toxicity compound, saving the output in `res_high`:**

First, we make the contrast for the high toxicity compound and save the levels:

```{r high-contrast}
#

```

Then, we loop through `levels` and save results:

```{r high-loop}
#

```

***

# Defining DEGs

## Thresholds

There are many ways to define a differentially expressed gene based either on the log2 fold change (log2FC, which reflects the effect size), the adjusted p-value (which reflects the statistical significance after correcting for multiple testing), or a combination of both. For example, some studies may define a gene as differentially expressed if it has an adjusted p-value below 0.05, indicating high statistical confidence, while others may require an absolute log2FC above log2(1.2) (i.e., a twenty percent change) to ensure the change is also biologically meaningful. Combining both criteria helps balance sensitivity and specificity, reducing the chance of identifying genes that are statistically but not biologically relevant, or vice versa.

**Exercise 14: Create two new variables `dir` and `sig` that describe each gene's significance (T/F) and direction of effect (up/down):**

<details>
  <summary><strong>Hint</strong></summary>

  Don't forget to do it for the high and low toxicity compounds.

</details>

```{r sig-dir}
#

```

***

## Save

It is important to save output of analyses locally, especially when they can be quite lengthy to rerun. This will save you considerable time later in the project. 

**Exercise 15: Save the results using the path variables you created at the start of the script:**

```{r save}
#

```

***

# Plots

## Dose-response plots

One of the plots that is useful to make following DEG analysis is visualization of any dose response effects. In order to ensure that all data point are plotted correctly, it is helpful to create a base data frame for all the direction, concentration combinations.

**Exercise 16: Create a data frame `plot_df` with all compound, concentration, and direction combinations:**

<details>
  <summary><strong>Hint</strong></summary>

  It may be helpful to `rbind()` your high and low toxicity compound results together for visualizations.

</details>

```{r ref-df}
#

```

***

Using `mean_ID` and `separate()`, you can extract information about the compound and concentration of each experimental group.

**Exercise 17: Create a data frame containing the number of DEGs, concentration, and compound, for each experimental condition and direction:**

<details>
  <summary><strong>Hint</strong></summary>

  Don't forget to set the number of DEGs to 0, where appropriate. 

</details>

```{r plot-df}
#

```

***

**Exercise 18: Plot the number of DEGs across concentrations for the two compounds. Do you see a dose-response?**

```{r dose-response}
#

```

***

## Volcano plots

A volcano plot is useful to visualize effect sizes and significance of each gene in one plot, by plotting log2 fold changes (x-axis) against -log10 p-values (y-axis).

**Exercise 19: Create volcano plots for each of the compounds:**

<details>
  <summary><strong>Hint</strong></summary>

  If you want to plot all concentrations, it may be sensible to create distinct plots for the two compounds. However, you could also plot only the top concentration volcano plot, if the dose response is suggestive that this would be more informative. 

</details>

```{r volcano}
#

```

***

## MA plots

One feature that volcano plots miss is the baseline expression of genes. This can mean that very lowly expressed genes appear important (due to high significance and effect sizes). Visualizing results using an MA plot, which plots log2 base mean (y-axis) against log2 fold changes (x-axis), can be helpful to distinguish between noisy genes and biologically relevant ones.

**Exercise 20: Create MA plots for the two compounds. Outline your findings:**

```{r ma}
#

```

***

# Advanced question

## Gene level plots

It can also be useful to plot individual gene results, especially to investigate gene-level dose responses.

**Exercise 21: Plot the top 16 genes for each of the compounds in a dose-response plot. Are there any genes with particular relevance to hepatotoxicity?**

```{r high-gene}
#

```

***

# Session Info

```{r session-info}
#

```

***

This is the end of the differential gene expression analysis. Next, please move on to functionally interpret your results using over-representation analysis in `06_ORA_Outline.Rmd`. Example answers will be available from the GitHub at EOB on Friday.

***

